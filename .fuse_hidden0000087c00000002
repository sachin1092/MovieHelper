import sys
from PySide.QtCore import *
from PySide.QtGui import *
import mainGui
import operator
import movielookup
import json

class MainWindow(QMainWindow, mainGui.Ui_mainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.table_view = self.tvEverything
        self.table_model = self.MyTableModel(self, tuples, self.header)
        self.table_view.setModel(self.table_model)
        # set font
        # font = QFont("Courier New", 14)
        # table_view.setFont(font)
        # set column width to fit contents (set font first!)
        self.table_view.resizeColumnsToContents()
        # enable sorting
        self.table_view.setSortingEnabled(True)
        self.buttonOpen.clicked.connect(self.doThing)
        self.assignThread()


    def assignThread(self):
        for movie in files:
            self.workerThread = WorkerThread(movie)
            self.connect(self.workerThread, SIGNAL("threadDone(QString)"), self.doThing, Qt.DirectConnection)
            self.connect(self.workerThread, SIGNAL("allDone()"), self.allDone, Qt.DirectConnection)
            self.workerThread.start()


    def allDone(self):
        self.progressBar.hide()

    def doThing(self, text):
        jsonvalues = json.loads(text)
        mtup = (jsonvalues["Title"], jsonvalues["imdbRating"], jsonvalues["Released"], jsonvalues["Runtime"], jsonvalues["Genre"])
        self.table_model.updateTableData(mtup)
        print "doThing", text

    class MyTableModel(QAbstractTableModel):
        def __init__(self, parent, mylist, header, *args):
            QAbstractTableModel.__init__(self, parent, *args)
            self.mylist = mylist
            self.header = header

        def updateTableData(self, tup):
            self.emit(SIGNAL("layoutAboutToBeChanged()"))
            self.mylist.append(tup)
            self.emit(SIGNAL("layoutChanged()"))

        def rowCount(self, parent):
            return len(self.mylist)

        def columnCount(self, parent):
            return len(self.mylist[0])

        def data(self, index, role):
            if not index.isValid():
                return None
            elif role != Qt.DisplayRole:
                return None
            return self.mylist[index.row()][index.column()]

        def headerData(self, col, orientation, role):
            if orientation == Qt.Horizontal and role == Qt.DisplayRole:
                return self.header[col]
            return None

        def sort(self, col, order):
            """sort table by given column number col"""
            self.emit(SIGNAL("layoutAboutToBeChanged()"))
            self.mylist = sorted(self.mylist,
                key=operator.itemgetter(col))
            if order == Qt.DescendingOrder:
                self.mylist.reverse()
            self.emit(SIGNAL("layoutChanged()"))
    # the solvent data ...
    header = [' Title ', ' Rating ', ' Released ', ' Runtime ', ' Genre ']
    # use numbers for numeric data to sort properly

class WorkerThread(QThread):

    def __init__(self, text, parent=None):
        super(WorkerThread, self).__init__(parent)
        self.name = text

    def run(self):
        for i in self.name:
            print i
            print type(i)
            response = movielookup.finder(i)
            print response
            self.emit(SIGNAL("threadDone(QString)"), response)
        self.emit(SIGNAL("allDone()"))


files = []

tuples = ()

def startMain(names):
    app = QApplication(sys.argv)
    print names
    files.append(names)
    form1 = MainWindow()
    form1.show()
    app.exec_()